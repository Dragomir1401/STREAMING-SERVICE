______________________________
|                            |
|   Copyright                |
|      Dragomir Andrei 2022  |
|                            |
\____________________________/

----------------------------------------------------------------------------
Name: Dragomir Andrei
Class: 322CA

----------------------------------------------------------------------------
-----------------------------OOP TV-----------------------------------------
----------------------------------------------------------------------------



----------------------------------------------------------------------------


____________Description___________


    This project represents the back end part of a platform of streaming similar
to Netflix, HBO MAX or Disney+. It is a Java built design consisting of different
pages which together represent a close copy of Netflix functionalities. Input and
Output are made with JSON for easier readability and parsing, some tests consisting
of tens of thousands of lines.


    There are different pages in this backend part, such as: Login page, Register,
first page movie list, Search, Filter results, Account upgrades(premium, buy currency),
See details of a movie, watch/like/rate a movie, see rating and likes and Logout. They
all have relations between them and permit/deny access to each other depending on the
an easier to follow menu for the user.


    Commands are split in two different types:

    1-- change page commands which simulate the forward, backwards buttons of a
        website or a menu for picking what page to go to.

    2-- on page commands which simulate what actions can be done on that specific
        page for example:


    On page see details of the movie we are shown all the specifications of the movie:

- genres, actors, likes, ratings, duration, year publicised, countries where it is banned

    but we can action on that movie by watching it, liking it or rating it.



-----------------------------------------------------------------------------




------------------------------------------------------------------------------


____________Implementation____________

    The project has a command parser as main entrance point in the program.
There are structures for current user and current page in the momentary
package and all the input classes are in the input package.


    Commands package contains all the general commands of the project, the most
important ones being OnPage and ChangePage. The two further develop the
solution tree by splitting into commands.



     * DESIGN PATTERN 1 *
    The on page commands are implemented using factory design pattern by
creating an abstract method command, which is extended by every type
of command and using a switch by name an instance of the class command
is created by the factory model. The general run method decides what
child class it will use for every given command.



                                   * Command *
                                       ||
  /-----------------/-------------------\-------------------\------------\
  |                 |                   |                   |            |
  |                 |                   |                   |            |
BuyPremium      BuyTokens             Filter               Like          |
                                                                         |
                                                                         /
    /---------------/------------/------------/------------/------------/-
    |               |            |            |            |            |
  Login          Purchase       Rate       Register       Search      Watch




     * DESIGN PATTERN 2 *
    As second design pattern, the project uses Singleton for the current user
instance and for the tokens command class, user commands and movies commands.
The reasoning behind is that these classes need a singular instantiation
in the program and they get changed themselves, not instantiated again, but have
to be reset from test to test.



     * DESIGN PATTERN 3 *
    As third design pattern, the implementation follows strategy design pattern
for the filter command. There is an interface strategy which is implemented
by three different classes:

    - GenresStrategy          - StartsWithStrategy          - ActorsStrategy

    The methods which use the strategies only know about the general interface
strategy and then decides what subclass should be followed for the apply
strategy criteria.



    There are also sorters for list of movies which implement the sort interface.

                        -sortByDuration   -sortByRating




    Input class has role of database for the project and contains the list of
users, the list of movies and the list of actions for the streaming platform.
Output is generated using output class and command output class to keep the JSON
format.


------------------------------------------------------------------------------





------------------------------------------------------------------------------

_____________Comments_____________


    The implementation could have been done better based on the generality of
the code. Besides this I could have made a more modularized approach.

    The system follows a system of abstract method implementation and factory
of each command. Perhaps an use of builder design pattern for pages or filter
pattern for filters/sorters. Use of further abstract classes and interfaces
could have made the implementation easier and more facile.


------------------------------------------------------------------------------





-----------------------------------------------------------------------------


Resources:

https://ocw.cs.pub.ro/courses/poo-ca-cd/teme/proiect/etapa1
https://ocw.cs.pub.ro/courses/poo-ca-cd/laboratoare/design-patterns
https://refactoring.guru/design-patterns/factory-method
https://jsondiff.com/
https://ocw.cs.pub.ro/courses/poo-ca-cd/administrativ/barem_teme


-----------------------------------------------------------------------------