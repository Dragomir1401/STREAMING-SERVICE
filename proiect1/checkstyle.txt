Starting audit...
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\checker\CheckStyleConstants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:14:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:15: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:15:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:55:56: '&&' should be on a new line. [OperatorWrap]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:56: Line is longer than 100 characters (found 123). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:57: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:69:36: Parameter pageNow should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:69:53: Parameter name should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:79:36: Parameter pageNow should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:79:53: Parameter movieList should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:80:36: Parameter filterByCountry should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:80:69: Parameter output should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:84: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:87:36: Parameter pageNow should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:87:53: Parameter movieInput should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:87:76: Parameter output should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\ChangePage.java:90: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\CommandParser.java:9:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\CommandParser.java:10:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\HomepageSetter.java:5:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\HomepageSetter.java:6:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:18:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:26:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'findMovieInstance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'findMovieInstance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:26:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:28:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:34:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'findMovieIndex' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'findMovieIndex' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:34:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:37:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:44: Line is longer than 100 characters (found 128). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:44:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'getMovieDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'getMovieDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:44:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:54: Line is longer than 100 characters (found 125). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:54:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'purchaseMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'purchaseMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:54:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:66: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:86: Line is longer than 100 characters (found 127). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:90: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:103: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:103:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'purchaseMovieStandardAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'purchaseMovieStandardAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:103:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:111: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:115: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:118: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:118:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'watchMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'watchMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:118:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:122: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:124: Line is longer than 100 characters (found 126). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:136: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:139: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:139:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'likeMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'likeMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:139:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:156: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:159: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:159:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'rateMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'rateMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:159:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:162:62: '5' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:201: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'modifyAppearances' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'modifyAppearances' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:35: Parameter input should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:48: Parameter pageNow should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:65: Parameter movie should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:204:83: Parameter rateOrLike should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:206: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:235:5: Class 'MovieCommands' looks like designed for extension (can be subclassed), but the method 'findMovieInstanceForEdgeCase' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieCommands' final or making the method 'findMovieInstanceForEdgeCase' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:235:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:235:52: Parameter pageNow should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:235:69: Parameter actionInput should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:238: Line is longer than 100 characters (found 118). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\MovieCommands.java:240: Line is longer than 100 characters (found 124). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:3:15: Using the '.*' form of import should be avoided - filters.*. [AvoidStarImport]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:4:13: Using the '.*' form of import should be avoided - input.*. [AvoidStarImport]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:14:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:15: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:15:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:33: Line is longer than 100 characters (found 123). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:35:89: '&&' should be on a new line. [OperatorWrap]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:43: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:55: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:57:86: '&&' should be on a new line. [OperatorWrap]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:61: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:65: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:75: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:82: Line is longer than 100 characters (found 118). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:89: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:98: Line is longer than 100 characters (found 121). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:103: Line is longer than 100 characters (found 118). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:110: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:110:21: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:111: Line is longer than 100 characters (found 133). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:117: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:117:21: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:118: Line is longer than 100 characters (found 134). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:140: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:152: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:159: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:179: Line is longer than 100 characters (found 133). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:189: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:199: Line is longer than 100 characters (found 129). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\OnPage.java:210: Line is longer than 100 characters (found 129). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:11:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:19: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:19:5: Class 'TokenCommands' looks like designed for extension (can be subclassed), but the method 'buyTokens' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TokenCommands' final or making the method 'buyTokens' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:19:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:32:5: Class 'TokenCommands' looks like designed for extension (can be subclassed), but the method 'buyPremiumAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TokenCommands' final or making the method 'buyPremiumAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:32:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:34:13: '10' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\TokenCommands.java:46:63: '10' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:10:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:14:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:22:5: Class 'UserCommands' looks like designed for extension (can be subclassed), but the method 'userExists' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserCommands' final or making the method 'userExists' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:22:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:25:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:31:5: Class 'UserCommands' looks like designed for extension (can be subclassed), but the method 'checkCredentials' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserCommands' final or making the method 'checkCredentials' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:31:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:34: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:35: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:41:5: Class 'UserCommands' looks like designed for extension (can be subclassed), but the method 'findUserInDatabase' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserCommands' final or making the method 'findUserInDatabase' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:41:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:44:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:50:5: Class 'UserCommands' looks like designed for extension (can be subclassed), but the method 'userCanSeeMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserCommands' final or making the method 'userCanSeeMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:50:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\commands\UserCommands.java:52:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\Filter.java:8:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\Filter.java:8:26: Redundant 'final' modifier. [RedundantModifier]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\Filter.java:8:57: Redundant 'final' modifier. [RedundantModifier]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\FilterByActors.java:9:5: Class 'FilterByActors' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterByActors' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\FilterByCountry.java:10:5: Class 'FilterByCountry' looks like designed for extension (can be subclassed), but the method 'filter' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterByCountry' final or making the method 'filter' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\FilterByCountry.java:14:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\FilterByGenre.java:9:5: Class 'FilterByGenre' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterByGenre' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\FilterStartsWith.java:10:5: Class 'FilterStartsWith' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterStartsWith' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\UserFilter.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\UserFilter.java:9:29: Redundant 'final' modifier. [RedundantModifier]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\filters\UserFilter.java:9:60: Redundant 'final' modifier. [RedundantModifier]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:14:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:18:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:22:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getPage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getPage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:26:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setPage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setPage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:30:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getFeature' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getFeature' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:34:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setFeature' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setFeature' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:38:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getCredentials' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getCredentials' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:42:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setCredentials' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setCredentials' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:46:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getStartsWith' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getStartsWith' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:50:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getFilters' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getFilters' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:54:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setFilters' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setFilters' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:54:28: Parameter filters should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:58:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getRate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getRate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:62:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:66:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'setMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'setMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\ActionInput.java:70:5: Class 'ActionInput' looks like designed for extension (can be subclassed), but the method 'getCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ActionInput' final or making the method 'getCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:10:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:14:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:18:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'getPassword' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'getPassword' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:22:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'setPassword' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'setPassword' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:26:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'getAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'getAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:30:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'setAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'setAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:34:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'getCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'getCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:38:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'setCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'setCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:42:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'getBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'getBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\CredentialsInput.java:46:5: Class 'CredentialsInput' looks like designed for extension (can be subclassed), but the method 'setBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CredentialsInput' final or making the method 'setBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\FilterInput.java:9:5: Class 'FilterInput' looks like designed for extension (can be subclassed), but the method 'getSort' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterInput' final or making the method 'getSort' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\FilterInput.java:13:5: Class 'FilterInput' looks like designed for extension (can be subclassed), but the method 'setSort' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterInput' final or making the method 'setSort' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\FilterInput.java:17:5: Class 'FilterInput' looks like designed for extension (can be subclassed), but the method 'getContains' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterInput' final or making the method 'getContains' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\FilterInput.java:21:5: Class 'FilterInput' looks like designed for extension (can be subclassed), but the method 'setContains' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FilterInput' final or making the method 'setContains' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:14: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:20:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getUsers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getUsers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:24:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'setUsers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'setUsers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:28:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:32:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'setMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'setMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:36:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getActions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getActions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\Input.java:40:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'setActions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'setActions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:37:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'resetMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'resetMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:37:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:49:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'increaseLikes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'increaseLikes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:49:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:52:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'increaseNumRatings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'increaseNumRatings' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:52:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:56:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:60:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:64:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:68:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:72:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:76:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:80:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getGenres' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getGenres' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:84:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setGenres' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setGenres' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:88:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getActors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getActors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:92:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setActors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setActors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:96:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getCountriesBanned' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getCountriesBanned' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:100:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setCountriesBanned' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setCountriesBanned' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:104:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getNumLikes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getNumLikes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:108:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setNumLikes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setNumLikes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:112:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getRating' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getRating' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:116:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setRating' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setRating' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:120:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'getNumRatings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'getNumRatings' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\MovieInput.java:124:5: Class 'MovieInput' looks like designed for extension (can be subclassed), but the method 'setNumRatings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MovieInput' final or making the method 'setNumRatings' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\SortInput.java:8:5: Class 'SortInput' looks like designed for extension (can be subclassed), but the method 'getRating' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortInput' final or making the method 'getRating' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\SortInput.java:12:5: Class 'SortInput' looks like designed for extension (can be subclassed), but the method 'setRating' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortInput' final or making the method 'setRating' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\SortInput.java:16:5: Class 'SortInput' looks like designed for extension (can be subclassed), but the method 'getDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortInput' final or making the method 'getDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\SortInput.java:20:5: Class 'SortInput' looks like designed for extension (can be subclassed), but the method 'setDuration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortInput' final or making the method 'setDuration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:13:40: '15' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:48:37: '15' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:52:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'resetUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'resetUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:52:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:59:37: '15' is a magic number. [MagicNumber]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:62:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getCredentials' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getCredentials' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:66:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setCredentials' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setCredentials' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:70:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getPurchasedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getPurchasedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:74:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setPurchasedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setPurchasedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:78:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getWatchedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getWatchedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:82:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setWatchedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setWatchedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:86:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getLikedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getLikedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:90:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setLikedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setLikedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:94:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getRatedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getRatedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:98:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setRatedMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setRatedMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:102:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getTokensCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getTokensCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:106:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setTokensCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setTokensCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:110:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'getNumFreePremiumMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'getNumFreePremiumMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\input\UserInput.java:114:5: Class 'UserInput' looks like designed for extension (can be subclassed), but the method 'setNumFreePremiumMovies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserInput' final or making the method 'setNumFreePremiumMovies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:9:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'getActors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'getActors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:13:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'setActors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'setActors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:17:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'getGenre' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'getGenre' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:21:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'setGenre' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'setGenre' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:21:26: Parameter genre should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:25:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'getCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'getCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\items\Contains.java:29:5: Class 'Contains' looks like designed for extension (can be subclassed), but the method 'setCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contains' final or making the method 'setCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Main.java:14:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Main.java:17:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Main.java:17:29: Parameter args should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Main.java:29:9: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:1:9: Name 'momentaryInstances' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:41:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:45:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:49:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:53:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getUserCommands' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getUserCommands' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:57:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getTokensCommands' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getTokensCommands' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:61:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getMoviesCommands' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getMoviesCommands' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:65:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getMovieList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getMovieList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:69:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'setMovieList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'setMovieList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:73:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'getMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'getMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\PageNow.java:77:5: Class 'PageNow' looks like designed for extension (can be subclassed), but the method 'setMovie' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageNow' final or making the method 'setMovie' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\UserNow.java:1:9: Name 'momentaryInstances' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\UserNow.java:10:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\UserNow.java:17:5: Class 'UserNow' looks like designed for extension (can be subclassed), but the method 'getUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserNow' final or making the method 'getUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\momentaryInstances\UserNow.java:21:5: Class 'UserNow' looks like designed for extension (can be subclassed), but the method 'setUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserNow' final or making the method 'setUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:35:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'getError' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'getError' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:39:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'setError' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'setError' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:43:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'getCurrentMoviesList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'getCurrentMoviesList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:47:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'setCurrentMoviesList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'setCurrentMoviesList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:47:61: 'moviesList' hides a field. [HiddenField]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:51:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'getCurrentUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'getCurrentUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:55:5: Class 'CommandOutput' looks like designed for extension (can be subclassed), but the method 'setCurrentUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CommandOutput' final or making the method 'setCurrentUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\CommandOutput.java:55:48: 'user' hides a field. [HiddenField]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\output\Output.java:9:5: Class 'Output' looks like designed for extension (can be subclassed), but the method 'getOutput' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Output' final or making the method 'getOutput' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\Sort.java:8:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByDuration.java:10:5: Class 'SortByDuration' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortByDuration' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByDuration.java:11:21: Parameter movies should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByDuration.java:11:46: Parameter parameter should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByLikes.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByLikes.java:10:5: Class 'SortByLikes' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortByLikes' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByLikes.java:11:21: Parameter movies should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByLikes.java:11:46: Parameter parameter should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:8:5: Class 'SortByRating' looks like designed for extension (can be subclassed), but the method 'run' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortByRating' final or making the method 'run' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:9:21: Parameter movies should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:9:46: Parameter parameter should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:15:44: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:20:5: Class 'SortByRating' looks like designed for extension (can be subclassed), but the method 'runForEqualCases' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SortByRating' final or making the method 'runForEqualCases' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:20:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:20:34: Parameter movies should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:20:59: Parameter parameter should be final. [FinalParameters]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:24:17: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:26:17: 'else' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:33:44: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:36:17: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\sorters\SortByRating.java:38:17: 'else' construct must use '{}'s. [NeedBraces]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Test.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\ANUL2\PROIECT_POO\proiect1\.\src\Test.java:9:28: Using the '.*' form of import should be avoided - java.util.concurrent.*. [AvoidStarImport]
Audit done.
Checkstyle ends with 281 errors.
